{"version":3,"file":"/packages/mizzao:autocomplete.js","sources":["mizzao:autocomplete/autocomplete-server.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;4BACE;;cAAC,cAAD,GAAgB,SAAC,MAAD,EAAS,GAAT;WAGd,KAAK,CAAC,UAAU,CAAC,cAAjB,CAAgC,MAAhC,EAAwC,GAAxC,EAA6C,qBAA7C,EAHc;GAAhB;;;;IADF;;MAMM,CAAC,OAAP,CAAe,wBAAf,EAAyC,SAAC,QAAD,EAAW,OAAX,EAAoB,QAApB;AACvC;eAAa,MAAO,UAApB;AACA;AACE,UAAU,UAAM,WAAW,wDAAjB,CAAV,CADF;GADA;AAMA,iBAAiB,CAAC,WAAX,EAAP;AACE,UAAM,CAAC,MAAP,CAAc,WAAW,sNAAzB;AACA,WAAO,EAAP,CAFF;GANA;AAWA,MAAyD,OAAO,CAAC,KAAjE;WAAO,CAAC,KAAR,GAAgB,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,KAAjB,CAAb,CAAhB;GAXA;EAeA,YAAY,CAAC,aAAb,CAA4B,UAAU,CAAC,IAAX,CAAgB,QAAhB,EAA0B,OAA1B,CAA5B,EAAgE,IAAhE,CAfA;SAkBA,IAAI,CAAC,KAAL,GAnBuC;CAAzC,CANA;A","sourcesContent":["class Autocomplete\n  @publishCursor: (cursor, sub) ->\n    # This also attaches an onStop callback to sub, so we don't need to worry about that.\n    # https://github.com/meteor/meteor/blob/devel/packages/mongo/collection.js\n    Mongo.Collection._publishCursor(cursor, sub, \"autocompleteRecords\")\n\nMeteor.publish 'autocomplete-recordset', (selector, options, collName) ->\n  collection = global[collName]\n  unless collection\n    throw new Error(collName + ' is not defined on the global namespace of the server.')\n\n  # This is a semi-documented Meteor feature:\n  # https://github.com/meteor/meteor/blob/devel/packages/mongo-livedata/collection.js\n  unless collection._isInsecure()\n    Meteor._debug(collName + ' is a secure collection, therefore no data was returned because the client could compromise security by subscribing to arbitrary server collections via the browser console. Please write your own publish function.')\n    return [] # We need this for the subscription to be marked ready\n\n  # guard against client-side DOS: hard limit to 50\n  options.limit = Math.min(50, Math.abs(options.limit)) if options.limit\n\n  # Push this into our own collection on the client so they don't interfere with other publications of the named collection.\n  # This also stops the observer automatically when the subscription is stopped.\n  Autocomplete.publishCursor( collection.find(selector, options), this)\n\n  # Mark the subscription ready after the initial addition of documents.\n  this.ready()\n\n"]}